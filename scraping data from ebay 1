{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "f322b721",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: requests in ./anaconda3/lib/python3.10/site-packages (2.28.1)\n",
      "Requirement already satisfied: urllib3<1.27,>=1.21.1 in ./anaconda3/lib/python3.10/site-packages (from requests) (1.26.14)\n",
      "Requirement already satisfied: idna<4,>=2.5 in ./anaconda3/lib/python3.10/site-packages (from requests) (3.4)\n",
      "Requirement already satisfied: certifi>=2017.4.17 in ./anaconda3/lib/python3.10/site-packages (from requests) (2023.7.22)\n",
      "Requirement already satisfied: charset-normalizer<3,>=2 in ./anaconda3/lib/python3.10/site-packages (from requests) (2.0.4)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0d95bdf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: beautifulsoup4 in ./anaconda3/lib/python3.10/site-packages (4.11.1)\n",
      "Requirement already satisfied: soupsieve>1.2 in ./anaconda3/lib/python3.10/site-packages (from beautifulsoup4) (2.3.2.post1)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install beautifulsoup4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b09eb2c4",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "from bs4 import BeautifulSoup\n",
    "import csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "89a1e2f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "page = \"https://www.ebay.com/sch/i.html?_nkw=table\"\n",
    "response = requests.get(page)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "0df6512f",
   "metadata": {},
   "outputs": [],
   "source": [
    "soup = BeautifulSoup(response.content, 'html.parser')\n",
    "#print(soup.prettify())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6c5af4c3",
   "metadata": {},
   "outputs": [],
   "source": [
    "    product_names = soup.find_all(\"div\", class_=\"s-item__title\")\n",
    "    prices = soup.find_all(\"span\", class_=\"s-item__price\")\n",
    "    shipping_costs = soup.find_all(\"span\", class_=\"s-item__shipping s-item__logisticsCost\")\n",
    "    image_urls = soup.find_all(\"div\", class_=\"s-item__image-wrapper image-treatment\")\n",
    "    watchers = soup.find_all(\"span\", class_=\"s-item__dynamic s-item__watchCountTotal\")\n",
    "    product_conditions = soup.find_all(\"span\", class_=\"SECONDARY_INFO\")\n",
    "    \n",
    "    with open('tableList.tsv', 'w', newline='') as tsv_file:\n",
    "        writer = csv.writer(tsv_file, delimiter='\\t')\n",
    "        writer.writerow([\"Product Name\", \"Price\", \"Shipping Cost\", \"Image URL\", \"Watchers\", \"Product Condition\"])\n",
    "\n",
    "\n",
    "        for i in range(len(product_names)):\n",
    "            product_name = product_names[i].text.strip() if i < len(product_names) else \"\"\n",
    "            price = prices[i].text.strip() if i < len(prices) else \"\"\n",
    "            shipping_cost = shipping_costs[i].text.strip() if i < len(shipping_costs) else \"\"\n",
    "            image_url = image_urls[i].find(\"img\")[\"src\"] if i < len(image_urls) else \"\"\n",
    "            watcher = watchers[i].text.strip() if i < len(watchers) else \"\"\n",
    "            product_condition = product_conditions[i].text.strip() if i < len(product_conditions) else \"\"\n",
    "\n",
    "            writer.writerow([product_name, price, shipping_cost, image_url, watcher, product_condition])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "19150ee7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
